// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique @db.VarChar(255)
  username        String      @unique @db.VarChar(255)
  password        String      @db.VarChar(255)
  role            Role        @default(User)
  profile         Profile?
  createdAt       DateTime    @default(now())           @map("created_at")
  updatedAt       DateTime    @updatedAt                @map("updated_at")
  deletedAt       DateTime?                             @map("deleted_at")
  @@map("users")
}

enum Role {
  User
  Admin
}

model Profile {
  id                  String          @id @default(uuid())
  idUserFk            String                                  @map("id_user_fk")
  idUrbanVillageFk    String                                  @map("id_urban_village_fk")
  neighbourhood       Int       
  hamlet              Int
  address             String          @db.VarChar(255)
  urbanVillage        UrbanVillage    @relation(fields: [idUrbanVillageFk], references: [id])
  user                User            @relation(fields: [idUserFk], references: [id])
  createdAt           DateTime        @default(now())         @map("created_at")
  updatedAt           DateTime        @updatedAt              @map("updated_at")
  deletedAt           DateTime?                               @map("deleted_at")
  @@map("profiles")
}

model Country {
  id            String        @id @default(uuid())
  countryName   String        @unique @db.VarChar(60)   @map("country_name")
  provinces     Provincy[]
  createdAt     DateTime      @default(now())           @map("created_at")
  updatedAt     DateTime      @updatedAt                @map("updated_at")
  deletedAt     DateTime?                               @map("deleted_at")
  @@map("countries")
}

model Provincy {
  id              String      @id @default(uuid())
  idCountryFk     String                                @map("id_country_fk")
  provincyName    String      @unique @db.VarChar(60)   @map("provincy_name")
  cities          City[]
  country         Country     @relation(fields: [idCountryFk], references: [id])
  createdAt       DateTime    @default(now())           @map("created_at")
  updatedAt       DateTime    @updatedAt                @map("updated_at")
  deletedAt       DateTime?                             @map("deleted_at")
  @@map("provinces")
}

model City {
  id              String        @id @default(uuid())
  idProvincyFk    String                                  @map("id_provincy_fk")
  cityName        String        @unique @db.VarChar(60)   @map("city_name")
  provincy        Provincy      @relation(fields: [idProvincyFk], references: [id])
  districts       District[]
  createdAt       DateTime      @default(now())           @map("created_at")
  updatedAt       DateTime      @updatedAt                @map("updated_at")
  deletedAt       DateTime?                               @map("deleted_at")
  @@map("cities")
}

model District {
  id              String            @id @default(uuid())
  idCityFk        String                                    @map("id_provincy_fk")
  districtName    String            @db.VarChar(60)         @map("district_name")
  city            City              @relation(fields: [idCityFk], references: [id])
  urbanVillages   UrbanVillage[]
  createdAt       DateTime          @default(now())         @map("created_at")
  updatedAt       DateTime          @updatedAt              @map("updated_at")
  deletedAt       DateTime?                                 @map("deleted_at")
  @@map("districts")
}

model UrbanVillage {
  id                  String      @id @default(uuid())
  idDistrictFk        String                              @map("id_district_fk")
  urbanVillageName    String      @db.VarChar(60)         @map("urban_village_name")
  district            District    @relation(fields: [idDistrictFk], references: [id])
  profiles            Profile[]
  createdAt           DateTime    @default(now())         @map("created_at")
  updatedAt           DateTime    @updatedAt              @map("updated_at")
  deletedAt           DateTime?                           @map("deleted_at")
  @@map("urban_villages")
}

model Product {
  id                    Int                       @id @default(autoincrement())
  idBrandFk             Int                                                       @map("id_brand_fk")
  brand                 Brand                     @relation(fields: [idBrandFk], references: [id])
  idCategoryFk          Int                                                       @map("id_category_fk")
  category              Category                  @relation(fields: [idCategoryFk], references: [id])
  productName           String                    @unique                         @map("product_name")
  productDescription    String?                   @db.Text                        @map("product_description")
  productPrice          Int                                                       @map("product_price")
  variants              Variant[]
  materials             MaterialsOnProducts[]
  createdAt             DateTime                  @default(now())                 @map("created_at")
  updatedAt             DateTime                  @updatedAt                      @map("updated_at")
  deletedAt             DateTime?                                                 @map("deleted_at")
  @@map("products")
}

model Brand {
  id              Int                     @id @default(autoincrement())
  products        Product[]
  brandName       String                  @unique                         @map("brand_name")
  createdAt       DateTime                @default(now())                 @map("created_at")
  updatedAt       DateTime                @updatedAt                      @map("updated_at")
  deletedAt       DateTime?                                               @map("deleted_at")
  @@map("brands")
}

model Category {
  id              Int         @id @default(autoincrement())
  categoryName    String      @unique                         @map("category_name")
  categoryLabel   String      @unique                         @map("category_label")
  products        Product[]
  createdAt       DateTime    @default(now())                 @map("created_at")
  updatedAt       DateTime    @updatedAt                      @map("updated_at")
  deletedAt       DateTime?                                   @map("deleted_at")
  @@map("categories")
}

model Variant {
  id            Int                 @id @default(autoincrement())
  idProductFk   Int                                                                       @map("id_product_fk")
  product       Product             @relation(fields: [idProductFk], references: [id])
  idColorFk     Int                                                                       @map("id_color_fk")
  color         Color               @relation(fields: [idColorFk], references: [id])
  pictures      Picture[]
  units         Unit[]
  createdAt     DateTime            @default(now())                                       @map("created_at")
  updatedAt     DateTime            @updatedAt                                            @map("updated_at")
  deletedAt     DateTime?                                                                 @map("deleted_at")
  @@map("variants")
}

model Color {
  id            Int                   @id @default(autoincrement())
  colorName     String                @unique                         @map("color_name")
  colorValue    String                @unique                         @map("color_value")
  variants      Variant[]
  createdAt     DateTime              @default(now())                 @map("created_at")
  updatedAt     DateTime              @updatedAt                      @map("updated_at")
  deletedAt     DateTime?                                             @map("deleted_at")
  @@map("colors")
}

model Picture {
  id            Int         @id @default(autoincrement())
  idVariantFk   Int                                         @map("id_variant_fk")
  variant       Variant     @relation(fields: [idVariantFk], references: [id])
  imageUrl      String                                      @map("image_url")
  createdAt     DateTime    @default(now())                 @map("created_at")
  updatedAt     DateTime    @updatedAt                      @map("updated_at")
  deletedAt     DateTime?                                   @map("deleted_at")
  @@map("pictures")
}

// Many to many Relation between Unit & Variant
model Unit {
  id              Int         @id @default(autoincrement())
  idVariantFk     Int                                                               @map("id_variant_fk")
  variant         Variant     @relation(fields: [idVariantFk], references: [id])
  sku             String      @unique
  quantity        Int
  @@map("units")
}

model SizeType {
  id            Int                 @id @default(autoincrement())
  type          String              @unique
  sizes         Size[]
  createdAt     DateTime            @default(now())                 @map("created_at")
  updatedAt     DateTime            @updatedAt                      @map("updated_at")
  deletedAt     DateTime?                                           @map("deleted_at")
  @@map("size_types")
}

model Size {
  id              Int         @id @default(autoincrement())
  idSizeTypeFk    Int                                         @map("id_size_type_fk")
  sizeType        SizeType    @relation(fields: [idSizeTypeFk], references: [id])
  name            String
  value           String
  createdAt       DateTime    @default(now())                 @map("created_at")
  updatedAt       DateTime    @updatedAt                      @map("updated_at")
  deletedAt       DateTime?                                   @map("deleted_at")
  @@map("sizes")
}

// Many to many Relation between Product & Material
model Material {
  id              Int                     @id @default(autoincrement())
  materialName    String                  @unique                         @map("material_name")
  products        MaterialsOnProducts[]
  createdAt       DateTime                @default(now())                 @map("created_at")
  updatedAt       DateTime                @updatedAt                      @map("updated_at")
  deletedAt       DateTime?                                               @map("deleted_at")
  @@map("materials")
}

model MaterialsOnProducts {
  idProductFk     Int                                                               @map("id_product_fk")
  product         Product     @relation(fields: [idProductFk], references: [id])
  idMaterialFk    Int                                                               @map("id_material_fk")
  material        Material    @relation(fields: [idMaterialFk], references: [id])
  @@id([idProductFk, idMaterialFk])
  @@map("materials_on_products")
}
